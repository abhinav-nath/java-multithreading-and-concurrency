If we look at BasicMultiThreading.java, and assume if we need to perform 100 copy tasks then do we need to create 100 threads ?

Short and simple answer is NO !

Creating threads is a costly operation and creation of new threads must be done carefully and only when required.

  "It is like purchasing 100 vehicles for doing 100 deliveries."
  
So what we can do is create a pool of threads and assign 100 tasks to the threads of that pool.

We can create a thread pool by using ExecutorService (java.util.concurrent)


Creating a ThreadPool -

Below statement creates a thread pool of size 5.

    ExecutorService executor = Executors.newFixedThreadPool(5);



Submitting a Runnable task -

We can submit a task for execution using the execute method.

    executor.execute( runnableTaskInstance );

e.g.

    executor.execute(new CopyTask(sourceFile1, destFile1));
    
If a thread is available in the pool then it assigns this task to the thread otherwise the task is added to the blocking queue
and is kept till a thread is available. 